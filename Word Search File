Last Update: October, 3, 2019 | 6:47 PM
Status: Unfinished
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

package Assignments;

public class wordsearch {
	//watch for corners and sides of grids
	public static char[][]  fill;
	public static char[][]  board = {    
			{'A' , 'P', 'P', 'L', 'E', 'S'},
			{'N', 'E', 'E', 'O', 'R', 'A'},
			{'I', 'A', 'E', 'A', 'N', 'G'},
			{'W', 'P', 'A', 'M', 'C','E'},
			{'I', 'N', 'A', 'B', 'I', 'H'},
			{'K', 'N', 'O', 'M', 'E', 'L'},
	};
	/* Directions on the Square(corners are not part of the sides 
	 * 							but are still labeled their numbers)
	 * 	1, 1, 1, 1, 2,
	 * 	4, *, *, *, 2,
	 * 	4, *, *, *, 2,
	 *  4, *, *, *, 2,
	 *  4, 3, 3, 3, 3,
	 */
	public static boolean check (String word, int row, int col, char[][] record)
	{
		record[row][col] = '!';
		if (word.equals(""))
		{
			return true;
		}
		else if (word.charAt(0) == record[row-1][col])
		{
			if (row-1 == 0)
			{
				return true && sideCheck(word.substring(1), row-1, col, record, 1);
			}
			else
			{
				return true && check(word.substring(1), row-1, col, record);
			}
		}
		else if (word.charAt(0) == record[row+1][col])
		{
			if (row+1 == record.length-1)
			{
				return true && sideCheck(word.substring(1), row+1, col, record, 3);
			}
			else
			{
				return true && check(word.substring(1), row+1, col, record);
			}
		}
		else if (word.charAt(0) == record[row][col+1])
		{
			if (col+1 == record[0].length-1)
			{
				return true && sideCheck(word.substring(1), row, col+1, record, 2);
			}
			else
			{
				return true && check(word.substring(1), row, col+1, record);
			}
		}
		else if (word.charAt(0) == record[row][col-1])
		{
			if (col-1 == 0)
			{
				return true && sideCheck(word.substring(1), row, col-1, record, 4);
			}
			else
			{
				return true && check(word.substring(1), row, col-1, record);
			}
		}
		else if (word.charAt(0) == record[row+1][col+1])
		{
			if (row+1 == record.length && col+1 == record[0].length)
			{
				return true && cornerCheck(word.substring(1), row+1, col+1, record, 3);
			}
			else
			{
				return true && check(word.substring(1), row+1, col+1, record);
			}
		}
		else if (word.charAt(0) == record[row+1][col-1])
		{
			if (row+1 == record.length && col-1 == 0)
			{
				return true && cornerCheck(word.substring(1), row+1, col-1, record, 4);
			}
			else
			{
				return true && check(word.substring(1), row+1, col-1, record);
			}
		}
		else if (word.charAt(0) == record[row-1][col+1])
		{
			if (row-1 == 0 && col+1 == record[0].length)
			{
				return true && cornerCheck(word.substring(1), row-1, col+1, record, 2);
			}
			else
			{
				return true && check(word.substring(1), row-1, col+1, record);
			}
		}
		else if (word.charAt(0) == record[row-1][col-1])
		{
			if (row-1 == 0 && col-1 == 0)
			{
				return true && cornerCheck(word.substring(1), row-1, col-1, record, 1);
			}
			else
			{
				return true && check (word.substring(1), row-1, col-1, record);
			}
		}
		else
		{
			return false;
		}
	}
	public static boolean cornerCheck(String word, int row, int col, char[][] record, int dir)
	{
		record[row][col] = '!';
		if (word.equals(""))
		{
			return true;
		}
		if (dir == 1)
		{
			if (word.charAt(0) == record[row][col+1])
			{
				return true && sideCheck(word.substring(1), row, col+1, record, 1);
			}
			else if (word.charAt(0) == record[row+1][col])
			{
				return true && sideCheck(word.substring(1), row+1, col, record, 4);
			}
			else if (word.charAt(0) == record[row+1][col+1])
			{
				return true && check(word.substring(1), row+1, col+1, record);
			}
			else
			{
				return false;
			}
		}
		else if (dir == 2)
		{
			if (word.charAt(0) == record[row][col-1])
			{
				return true && sideCheck(word.substring(1), row, col, record, 1);
			}
			else if (word.charAt(0) == record[row+1][col])
			{
				return true && sideCheck(word.substring(1), row+1, col, record, 2);
			}
			else if (word.charAt(0) == record[row+1][col-1])
			{
				return true && check(word.substring(1), row+1, col-1, record);
			}
			else
			{
				return false;
			}
		}
		else if (dir == 3)
		{
			if (word.charAt(0) == record[row][col-1])
			{
				return true && sideCheck(word.substring(1), row, col-1, record, 3);
			}
			else if (word.charAt(0) == record[row-1][col])
			{
				return true && sideCheck(word.substring(1), row-1, col, record, 2);
			}
			else if (word.charAt(0) == record[row-1][col-1])
			{
				return true && check(word.substring(1), row-1, col-1, record);
			}
			else
			{
				return false;
			}
		}
		else
		{
			if(word.charAt(0) == record[row][col+1])
			{
				return true && sideCheck(word.substring(1), row, col+1, record, 3);
			}
			else if (word.charAt(0) == record[row-1][col])
			{
				return true && sideCheck(word.substring(1), row-1, col, record, 4);
			}
			else if (word.charAt(0) == record[row-1][col+1])
			{
				return true && check(word.substring(1), row-1, col+1, record);
			}
			else
			{
				return false;
			}
		}
	}
	public static boolean sideCheck(String word, int row, int col, char[][] record, int dir)
	{
		record[row][col] = '!';
		if (word.equals(""))
		{
			return true;
		}
		if (dir == 1)
		{
			if (word.charAt(0) == record[row][col-1] && row == 0 && col-1 == 0)
			{
				return true && cornerCheck(word.substring(1), row, col-1, record, 1);
			}
			else if (word.charAt(0) == record[row][col+1] && col+1 == record.length-1)
			{
				return true && cornerCheck(word.substring(1), row, col +1, record, 2);
			}
			else if (word.charAt(0) == record[row][col-1])
			{
				return true && sideCheck(word.substring(1), row, col-1, record, 1);
			}
			else if (word.charAt(0) == record[row][col+1])
			{
				return true && sideCheck(word.substring(1), row, col+1, record, 1);
			}
			else if (word.charAt(0) == record[row+1][col])
			{
				return true && check(word.substring(1), row+1, col, record);
			}
			else if (word.charAt(0) == record[row+1][col-1])
			{
				if (col-1 == 0)
				{
					return true && sideCheck(word.substring(1), row+1, col-1, record, 4);
				}
				else
				{
					return true && check(word.substring(1), row+1, col-1, record);
				}
			}
			else if (word.charAt(0) == record[row+1][col+1])
			{
				if (col+1 == 0)
				{
					return true && sideCheck(word.substring(1), row+1, col+1, record, 2);
				}
				else
				{
					return true && check(word.substring(1), row+1, col+1, record);
				}
			}
			else
			{
				return false;
			}
		}
		else if (dir == 2)
		{
			if (word.charAt(0) == record[row][col-1])
			{
				return true && check(word.substring(1), row, col-1, record);
			}
			else if (word.charAt(0) == record[row-1][col])
			{
				if (row - 1 == 0)
				{
					return true && cornerCheck(word.substring(1), row-1, col, record, 2);
				}
				else
				{
					return false;
				}
			}
			else if (word.charAt(0) == record[row+1][col])
			{
				if (row + 1 == record.length-1)
				{
					return true && cornerCheck(word.substring(1), row+1, col, record, 3);
				}
				else
				{
					return false;
				}
			}
			else if (word.charAt(0) == record[row-1][col-1])
			{
				if (row-1 == 0)
				{
					return true && sideCheck(word.substring(1), row-1, col-1, record, 1);
				}
				else
				{
					return true && check(word.substring(1), row-1, col-1, record);
				}
			}
			else if (word.charAt(0) == record[row+1][col-1])
			{
				if (row+1 == record.length-1)
				{
					return true && sideCheck(word.substring(1), row-1, col, record, 2);
				}
				else
				{
					return true && check(word.substring(1), row-1, col,record);
				}
			}
			else
			{
				return false;
			}
		}
		else if (dir == 3)
		{
			if (word.charAt(0) == record[row][col-1])
			{
				if (col-1 == 0)
				{
					return true && cornerCheck(word.substring(1), row, col-1, record, 4);
				}
				else
				{
					return true && sideCheck(word.substring(1), row, col-1, record, 3);
				}
			}
			else if (word.charAt(0) == record[row][col+1])
			{
				if (col+1 == record[0].length)
				{
					return true && cornerCheck(word.substring(1), row, col+1, record, 3);
				}
				else
				{
					return true && sideCheck(word.substring(1), row, col+1, record, 3);
				}
			}
			else if (word.charAt(0) == record[row-1][col])
			{
				return true && check(word.substring(1), row-1, col, record);
			}
			else if (word.charAt(0) == record[row-1][col-1])
			{
				if (col-1 == 0)
				{
					return true && sideCheck(word.substring(1), row-1, col-1, record, 4);
				}
				else
				{
					return true && check(word.substring(1), row-1, col-1, record);
				}
			}
			else if (word.charAt(0) == record[row-1][col+1])
			{
				if (col+1 == record[0].length-1)
				{
					return true && sideCheck(word.substring(1), row-1, col+1, record, 2);
				}
				else
				{
					return true && check(word.substring(1), row-1, col+1, record);
				}
			}
			else
			{
				return false;
			}
		}
		else
		{
			if (word.charAt(0) == record[row-1][col])
			{
				if (row-1 == 0)
				{
					return true && cornerCheck(word.substring(1), row-1, col, record, 1);
				}
				else
				{
					return true && sideCheck(word.substring(1), row-1, col, record, 4);
				}
			}
			else if (word.charAt(0) == record[row+1][col])
			{
				if (row+1 == record.length-1)
				{
					return true && cornerCheck(word.substring(1), row+1, col, record, 4);
				}
				else
				{
					return true && sideCheck(word.substring(1), row+1, col, record, 4);
				}
			}
			else if (word.charAt(0) == record[row][col+1])
			{
				return true && check(word.substring(0), row, col+1, record);
			}
			else if (word.charAt(0) == record[row-1][col+1])
			{
				if (row-1 == 0)
				{
					return true && sideCheck(word.substring(1), row-1, col+1, record, 1);
				}
				else
				{
					return true && check(word.substring(1), row-1, col+1, record);
				}
			}
			else if (word.charAt(0) == record[row+1][col+1])
			{
				if (row + 1 == record.length - 1)
				{
					return true && sideCheck(word.substring(1), row+1, col+1, record, 3);
				}
				else 
				{
					return true && check(word.substring(1),row+1, col+1, record);
				}
			}
			else
			{
				return false;
			}
		}
	}
	public static boolean wordMaze1 (String word, char[][] grid)
	{
		fill = grid;
		boolean result = false;
		for (int i = 0; i < grid.length; i++)     
		{                    
			for (int j = 0; j < grid[0].length; j++)
			{
				if (word.charAt(0) == fill[i][j])
				{
					if (i == 0 && j == 0 || i == 0 && j == grid[0].length-1)
					{
						fill[i][j] = '!';
						for (int y = 0; y < 3; y++)
						{
							result = result || cornerCheck(word.substring(1), i, j, fill, 1);
						}
					}
					else if (i == 0 && j > 0 && j < fill[0].length-1)
					{
						fill[i][j] = '!';
						for (int y = 0; y < 5; y++)
						{
							result = result || sideCheck(word.substring(1), i, j, fill, 1);
						}
					}
					else if (i == fill.length-1 && j > 0 && j < fill[0].length-1)
					{
						fill[i][j] = '!';
						for (int y = 0; y < 5; y++)
						{
							result = result || sideCheck(word.substring(1), i, j, fill, 3);
						}
					}
					else if (j == 0)
					{
						fill[i][j] = '!';
						for (int y = 0; y < 5; y++)
						{
							result = result || sideCheck(word.substring(1), i, j, fill, 4);
						}
					}
					else if (j == fill[0].length-1)
					{
						fill[i][j] = '!';
						for (int y = 0; y < 5; y++)
						{
							result = result || sideCheck(word.substring(1), i, j, fill, 2);
						}
					}
					else 
					{
						fill[i][j] = '!';
						for (int y = 0; y < 8; y++)
						{
							result = result || check(word, i, j, fill);
						}
					}
				}
			}
		}
		return result;
	}
	public static void main(String[] args)
	{
		System.out.println(wordMaze1("APPLE", board));
		System.out.println(wordMaze1("PEACH", board));
		System.out.println(wordMaze1("KIWI", board));
		System.out.println(wordMaze1("LEMON", board));
		System.out.println(wordMaze1("LIME", board));
		System.out.println(wordMaze1("ORANGE", board));
		System.out.println(wordMaze1("PINEAPPLE", board));
		System.out.println(wordMaze1("PEAR", board));
	}
}
