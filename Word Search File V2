Last Updated: October, 4, 2019 | 10:53 PM
Progress: Unfinished
//This is a different type of thinking, the last one's logic got too complicated so I restarted it, this has some errors of the
//old one fixed but is still in progress so not all are done, hopefully all done by saturday
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package Assignments;
public class wordsearch {
	//watch for corners and sides of grids
	public static boolean check (String word, int row, int col, char[][] grid, char[][] record)
	{
		record[row][col] = '!';
		if (word.equals(""))
		{
			return true;
		}
		else if (row -1 < 0 )
		{
			if (col-1 < 0)
			{
				if (grid[row][col+1] == word.charAt(0) && record[row][col+1] != '!')
				{
					return true && check(word.substring(1), row, col+1, grid, record);
				}
				else if (grid[row+1][col] == word.charAt(0) && record[row+1][col] != '!')
				{
					return true && check(word.substring(1), row+1, col, grid, record);
				}
				else if (grid[row+1][col+1] == word.charAt(0) && record[row+1][col+1] != '!')
				{
					return true && check(word.substring(1), row+1, col+1, grid, record);
				}
				else
				{
					return false;
				}
			}
			else if (col+1 == grid[0].length)
			{
				if (grid[row][col-1] == word.charAt(0) && record[row][col-1] != '!')
				{
					return true && check(word.substring(1), row, col-1, grid, record);
				}
				else if (grid[row+1][col] == word.charAt(0) && record[row+1][col] != '!')
				{
					return true && check(word.substring(1), row, col-1, grid, record);
				}
				else if (grid[row+1][col-1] == word.charAt(0) && record[row+1][col-1] != '!')
				{
					return true && check(word.substring(1), row+1, col-1, grid, record);
				}
				else
				{
					return false;
				}
			}
			else
			{
				if (grid[row][col-1] == word.charAt(0) && record[row][col-1] != '!')
				{
					return true && check(word.substring(1), row, col-1, grid, record);
				}
				else if (grid[row+1][col-1] == word.charAt(0) && record[row+1][col-1] != '!')
				{
					return true && check(word.substring(1), row+1, col-1, grid, record);
				}
				else if (grid[row][col+1] == word.charAt(0) && record[row][col+1] != '!')
				{

					return true && check(word.substring(1), row, col+1, grid, record);
				}
				else if (grid[row+1][col] == word.charAt(0) && record[row+1][col] != '!')
				{
					return true && check(word.substring(1), row+1, col, grid, record);
				}
				else if (grid[row+1][col+1] == word.charAt(0) && record[row+1][col+1] != '!')
				{
					return true && check(word.substring(1), row+1, col+1, grid, record);
				}
				else
				{
					return false;
				}
			}
		}
		else if (row + 1 == grid.length)
		{
			if (col-1 < 0)
			{
				if (grid[row-1][col] == word.charAt(0) && record[row-1][col] != '!')
				{
					return true && check(word.substring(1), row-1, col, grid, record);
				}
				else if (grid[row-1][col+1] == word.charAt(0) && record[row-1][col+1] != '!')
				{
					return true && check(word.substring(1), row-1, col+1, grid, record);
				}
				else if (grid[row][col+1] == word.charAt(0) && record[row][col+1] != '!')
				{
					return true && check(word.substring(1), row, col+1, grid, record);
				}
				else
				{
					return false;
				}
			}
			else if (col + 1 > 0)
			{
				if (grid[row][col-1] == word.charAt(0) && record[row][col-1] != '!')
				{
					return true && check(word.substring(1), row, col-1, grid, record);
				}
				else if (grid[row-1][col] == word.charAt(0) && record[row-1][col] != '!')
				{
					return true && check(word.substring(1), row-1, col, grid, record);
				}
				else if (grid[row-1][col-1] == word.charAt(0) && record[row-1][col-1] != '!')
				{
					return true && check(word.substring(1), row-1, col-1, grid, record);
				}
				else
				{
					return false;
				}
			}
			else
			{
				if (grid[row-1][col] == word.charAt(0) && record[row-1][col] != '!')
				{
					return true && check(word.substring(1), row-1, col, grid, record);
				}
				else if (grid[row][col-1] == word.charAt(0) && record[row][col-1] != '!')
				{
					return true && check(word.substring(1), row, col-1, grid, record);
				}
				else if (grid[row][col+1] == word.charAt(0) && record[row][col+1] != '!')
				{
					return true && check(word.substring(0), row, col+1, grid, record);
				}
				else if (grid[row-1][col-1] == word.charAt(0) && record[row-1][col-1] != '!')
				{
					return true && check(word.substring(0), row-1, col-1, grid, record);
				}
				else if (grid[row-1][col+1] == word.charAt(0) && record[row-1][col+1] != '!')
				{
					return true && check(word.substring(0), row-1, col+1, grid, record);
				}
				else
				{
					return false;
				}
			}
		}
		else if (col-1 < 0)
		{
			if (grid[row][col+1] == word.charAt(0) && record[row][col+1] != '!')
			{
				return true && check(word.substring(1), row, col+1, grid, record);
			}
			else if (grid[row-1][col] == word.charAt(0) && record[row-1][col] != '!')
			{
				return true && check(word.substring(1), row-1, col, grid, record);
			}
			else if (grid[row+1][col] == word.charAt(0) && record[row+1][col] != '!')
			{
				return true && check(word.substring(1), row+1, col, grid, record);
			}
			else if (grid[row-1][col+1] == word.charAt(0) && record[row-1][col+1] != '!')
			{
				return true && check(word.substring(1), row-1, col+1, grid, record);
			}
			else if (grid[row+1][col+1] == word.charAt(0) && record[row+1][col+1] != '!')
			{
				return true && check(word.substring(1), row+1, col+1, grid, record);
			}
			else
			{
				return false;
			}
		}
		else if (col+1 == grid[0].length)
		{
			if (grid[row][col-1] == word.charAt(0) && record[row][col-1] != '!')
			{
				return true && check(word.substring(1), row, col-1, grid, record);
			}
			else if (grid[row-1][col] == word.charAt(0) && record[row-1][col] != '!')
			{
				return true && check(word.substring(1), row-1, col, grid, record);
			}
			else if (grid[row+1][col] == word.charAt(0) && record[row+1][col] != '!')
			{
				return true && check(word.substring(1), row+1, col, grid, record);
			}
			else if (grid[row-1][col-1] == word.charAt(0) && record[row-1][col-1] != '!')
			{
				return true && check(word.substring(1), row-1, col-1, grid, record);
			}
			else if (grid[row+1][col-1] == word.charAt(0) && record[row+1][col-1] != '!')
			{
				return true && check(word.substring(1), row+1, col-1, grid, record);
			}
			else
			{
				return false;
			}
		}
		else
		{
			if (grid[row][col-1] == word.charAt(0) && record[row][col-1] != '!')
			{
				return true && check(word.substring(1), row, col-1, grid, record);
			}
			else if (grid[row][col+1] == word.charAt(0) && record[row][col+1] != '!')
			{
				return true && check(word.substring(1), row, col+1, grid, record);
			}
			else if (grid[row-1][col] == word.charAt(0) && record[row-1][col] != '!')
			{
				return true && check(word.substring(1), row-1, col, grid, record);
			}
			else if (grid[row+1][col] == word.charAt(0) && record[row+1][col] != '!')
			{
				return true && check(word.substring(1), row+1, col, grid, record);
			}
			else if (grid[row-1][col+1] == word.charAt(0) && record[row-1][col+1] != '!')
			{
				return true && check(word.substring(1), row-1, col+1, grid, record);
			}
			else if (grid[row-1][col-1] == word.charAt(0) && record[row-1][col-1] != '!')
			{
				return true && check(word.substring(1), row-1, col-1, grid, record);
			}
			else if (grid[row-1][col+1] == word.charAt(0) && record[row-1][col+1] != '!')
			{
				return true && check(word.substring(1), row-1, col+1, grid, record);
			}
			else if (grid[row+1][col-1] == word.charAt(0) && record[row+1][col-1] != '!')
			{
				return true && check(word.substring(1), row+1, col-1, grid, record);
			}
			else
			{
				return false;
			}
		}
	}
	public static boolean wordMaze1 (String word, char[][] grid)
	{
		char[][] fill = new char[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++)
		{
			for (int j = 0; j < grid.length; j++)
			{
				fill[i][j] = ' ';
			}
		}
		boolean result = false;
		if (word.equals(""))
		{
			return true;
		}
		else 
		{
			for (int i = 0; i < grid.length; i++)     
			{                    
				for (int j = 0; j < grid[0].length; j++)
				{
					if (word.charAt(0) == grid[i][j])
					{
						fill[i][j] = '!';
						result = result || check(word.substring(1), i, j, grid, fill);
					}
				}
			}
			return result;
		}
	}
	public static void main(String[] args)
	{
		char[][]  board = {    
				{'A', 'P', 'P', 'L', 'E', 'S'},
				{'N', 'E', 'E', 'O', 'R', 'A'},
				{'I', 'A', 'E', 'A', 'N', 'G'},
				{'W', 'P', 'A', 'M', 'C', 'E'},
				{'I', 'N', 'A', 'B', 'I', 'H'},
				{'K', 'N', 'O', 'M', 'E', 'L'},
		};
		System.out.println(wordMaze1("APPLE", board));
		System.out.println(wordMaze1("PEACH", board)); //true
	}
}
